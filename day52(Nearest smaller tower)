//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class GFG{
	public static void main(String [] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int test = Integer.parseInt(br.readLine());
		while(test-- > 0) {
			int n = Integer.parseInt(br.readLine());
			int [] arr = new int[n];
			String [] str = br.readLine().trim().split(" ");
			for(int i = 0; i < n; i++)
				arr[i] = Integer.parseInt(str[i]);
			Solution ob = new Solution();
			int [] ans = ob.nearestSmallestTower(arr);
			for(int i = 0; i < n; i++)
				System.out.print(ans[i]+" ");
			System.out.println();
		}
		
	}
}
// } Driver Code Ends


//User function Template for Java


class Solution{
	int [] nearestSmallestTower(int [] arr){
	    
	    
		//Write your code here
		
		int n=arr.length;
		Stack<Integer> stk1 = new Stack<>();
		Stack<Integer> stk2 = new Stack<>();

		int [] left = new int[n];
		int [] right = new int[n];
		int [] ans = new int[n];
		
		for(int i=0;i<n;i++){
		    while(stk1.size()!=0 &&arr[stk1.peek()]>=arr[i]){
		        stk1.pop();
		    }
		    if(stk1.size()!=0){
		        left[i]=stk1.peek();
		        
		    }else{
		        left[i]=-1;
		    }		     
		    stk1.push(i);

		}
		
		for(int i=n-1;i>=0;i--){
		    while(stk2.size()!=0 &&arr[stk2.peek()]>=arr[i]){
		        stk2.pop();
		    }
		    if(stk2.size()!=0){
		        right[i]=stk2.peek();
		        
		    }else{
		        right[i]=-1;
		       
		    } 
		    stk2.push(i);
		}
		
		
		for(int i=0;i<n;i++){
		    
		    if(left[i]==right[i]){
		        ans[i]=-1;
		    }
		    else if(left[i]==-1){
		        ans[i]=right[i];
		    }
		    else if(right[i]==-1){
		        ans[i]=left[i];
		    }
		    else if(i-left[i]<right[i]-i){
		        ans[i]=left[i];
		    }
		    else if(i-left[i]>right[i]-i){
		        ans[i]=right[i];
		    }
		    else if(arr[right[i]]<arr[left[i]]){
		        ans[i]=right[i];
		    }
		    else {
		        ans[i]=left[i];
		    }

		    
		}
		return ans;

	}
}
