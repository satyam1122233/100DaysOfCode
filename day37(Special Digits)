//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int N;
            N = Integer.parseInt(br.readLine());
            
            
            int A;
            A = Integer.parseInt(br.readLine());
            
            
            int B;
            B = Integer.parseInt(br.readLine());
            
            
            int C;
            C = Integer.parseInt(br.readLine());
            
            
            int D;
            D = Integer.parseInt(br.readLine());
            
            Solution obj = new Solution();
            int res = obj.bestNumbers(N, A, B, C, D);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends


public class Solution {
    static final int N = 100005;
    static final int M = 1000000007;
    static long[] fact = new long[N];
    static long[] invfact = new long[N];
    static boolean f = false;
    
    static long binpow(long a, long b, long p) {
        if (b == 0) return 1;
        long t = binpow(a, b / 2, p) % p;
        if (b % 2 == 1) return (((a * t) % p) * t) % p;
        else return (t * t) % p;
    }
    
    static void init() {
        fact[0] = 1;
        for (int i = 1; i < N; i++) {
            fact[i] = (i * fact[i-1]) % M;
        }
        invfact[N-1] = binpow(fact[N-1], M-2, M);
        for (int i = N-2; i >= 0; i--) {
            invfact[i] = ((i+1) * invfact[i+1]) % M;
        }
    }
    
    public int bestNumbers(int n, int a, int b, int c, int d) {
        if (!f) {
            f = true;
            init();
        }
        
        long ans = 0;
        if (a == b) {
            int sum = n * a;
            while (sum > 0) {
                if (sum % 10 == c || sum % 10 == d) {
                    return 1;
                }
                sum /= 10;
            }
            return 0;
        } else {
            for (int i = 0; i <= n; i++) {
                int sum = i * a + (n-i) * b;
                boolean good = false;
                while (sum > 0) {
                    if (sum % 10 == c || sum % 10 == d) {
                        good = true;
                        break;
                    }
                    sum /= 10;
                }
                if (good) {
                    ans += ncr(n, i);
                    ans %= M;
                }
            }
            return (int) ans;
        }
    }
    
    static long ncr(int n, int r) {
        return (((fact[n] * invfact[n-r]) % M) * invfact[r]) % M;
    }
}
